Часто во время обучения программированию стоит вопрос: что ещё можно запрограммировать?
Сначала стоит пробовать небольшие алгоритмические задачи. Они могут быть скучными, но их нужно делать, чтобы развить своё мышление.


ФИксировать ошибки

1. Алгоритмы работы с массивами

1) Скопировать одну часть массива в другой массив
copyArray(sourceArray, destArray, startIndex, len)

2) Реверсировать массив (порядок элементов массива должен быть противоположен исходному). То есть если он был 0,1,2,3, то будет 3,2,1,0

3) Переставьте элементы массива 0,1,2,3,4... в порядке 0,8,16,24,32, ... , 1,9,17,..., 2,10,18,...
То есть исходный массив должен быть, с точки зрения логики, разбит на части по 8-мь элементов. Сначала мы копируем в новый массив все элементы с индексом "0" из каждой части, потом с индексом "1" из каждой части и т.п.
Длина исходного массива всегда кратна 8-ми.

Вариант а) Сделайте это копированием в другой (новый) массив
Вариант б) Сделайте это "на месте", то есть без выделения памяти для другого массива. Это значит, что вы можете использовать пару вспомогательных переменных, но перемещать элементы должны в исходном массиве.

Если не получается, попробуйте сделать это сначала в массивах фиксированной длины (скажем, 16 элементов, потом - 24 элемента, и т.п.).
****????

2. Алгоритмы сортировки

Можно попробовать начать с реализации алгоритмов сортировки. Не забудьте всё тщательно тестировать автоматизированными тестами (которые вам тоже надо написать - тесты можно использовать одни и те же для разных реализаций).

Особенно можно обратить внимание на следующие алгоритмы:
1) Сортировка выбором максимального или минимального элемента (то есть каждый проход вы выбираете самый большой или маленький элемент и ставите его в начало; потом снова осуществляете проход и т.п.). Этот алгоритм интересен простотой реализации, если вам где-то понадобилось быстро реализовать такой поиск.
2) Усложнённый поиск: на каждой итерации вы ищете максимальный и минимальный элементы
Замерьте время выполнения алгоритма 1) и 2) на разных массивах. Прирост производительности должен быть примерно в 2 раза.
3) Поразрядная сортировка
4) Быстрая сортировка (quick sort)
5) Сортировка слиянием
6) Сортировка вставками (самый медленный из всех). Этот способ интересен тем, что вам нужно реализовать бинарный поиск в массиве.
7) Сортировка пузырьком. Этот способ интересен тем, что иногда применяется в алгоритмах оптимизации для сортировки элементов с нарушенной дихотомией.
8) Пирамидальная сортировка и сортировка с помощью деревьев, если вы способны реализовать эти алгоритмы


Упражнение на тесты:
Для тестов, в том числе, сгенерируйте массив из 8-ми элементов: [0, 1, 2, 3, 4, 5, 6, 7].
Сгенерируйте все возможные перестановки этого массива (их количество 8!=40320 [восклицательный знак - это факториал]). Для всех перестановок результат сортировки должен быть верным.


Решето эратосфена и битовые массивы


Работа с UTF-8
